package src.softwareSpecs;import jxl.write.WriteException;import java.awt.Color;import java.awt.Desktop;import java.awt.Dimension;import java.awt.EventQueue;import java.awt.Font;import java.awt.Frame;import java.awt.Toolkit;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.io.File;import java.io.IOException;import java.io.PrintWriter;import java.net.URI;import javax.swing.*;import javax.swing.border.EmptyBorder;import javax.swing.filechooser.FileNameExtensionFilter;import java.awt.Button;import java.util.ArrayList;import java.util.Scanner;import java.util.Set;public class NewGui extends JFrame {    private Excelerator excel = new Excelerator();    private JPanel panel_2;    private String projectName;    private JPanel contentPane;    private File selectedFile;    private double x;    private double y;    private double w;    private double h;    private JTabbedPane tabbedPane;    private JLabel lblFileSelected;    private JLabel statuesLabel;    private JTextField projectNameField;    private JComboBox comboBox;    private JComboBox startDateCombo;    private JComboBox endDateCombo;    private JComboBox startTimeCombo;    private JComboBox endTimeCombo;    private JComboBox cBoxNBound;    private JComboBox cBoxSBound;    private JComboBox cBoxEBound;    private JComboBox cBoxWBound;    private JCheckBox checkBoxNBound;    private JCheckBox checkBoxSBound;    private JCheckBox checkBoxEBound;    private JCheckBox checkBoxWBound;    private DefaultListModel northListModel;    private DefaultListModel southListModel;    private DefaultListModel eastListModel;    private DefaultListModel westListModel;    private DefaultListModel eventListModel;    private JTextField txtNewEventName;    private JComboBox timesCombo;    private JList listOFAvailDates;    private JList listOfSelectedDates;    private DefaultListModel availableModel;    private DefaultListModel selectedModel;    private JList listNBound;    private JList listSBound;    private JList listEBound;    private JList listWBound;    private JList list_4;    private Graphs graphs;    private JTextField writerFileText;    private ArrayList<Event> events;    /**     * Launch the application.     */    public static void main(String[] args) {        EventQueue.invokeLater(new Runnable() {            public void run() {                try {                    NewGui frame = new NewGui();                    frame.setVisible(true);                } catch (Exception e) {                    e.printStackTrace();                }            }        });    }    /**     * Create the frame.     */    public NewGui() {        double startTimer = System.nanoTime();        events = new ArrayList<Event>();        projectName = new String();        setIconImage(Toolkit.getDefaultToolkit().getImage(                NewGui.class.getResource("/Images/JFrame Icon.png")));        setForeground(UIManager.getColor("textHighlight"));        setResizable(false);        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        // code found here http://www.eclipse.org/forums/index.php/t/236548/        final Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();        x = screen.width / 1366.0;        y = screen.height / 768.0;        w = screen.width / 1366.0;        h = screen.height / 768.0;        setBounds(0, 0, screen.width, screen.height - 40);        setExtendedState(Frame.MAXIMIZED_BOTH);        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        contentPane = new JPanel();        contentPane.setBackground(Color.decode("#014D33"));        contentPane.setForeground(UIManager.getColor("textHighlight"));        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));        setContentPane(contentPane);        contentPane.setLayout(null);        JButton btnContactUs = new JButton("Contact us");        btnContactUs.setFont(new Font("Tahoma", Font.BOLD, 17));        btnContactUs.addActionListener(new ActionListener() {            public void actionPerformed(ActionEvent arg0) {                btnContactUsActionPerformed();            }        });        btnContactUs.setBounds((int)(987 * x), (int)(622 * y),(int) (139 * w),(int)( 23 * h));        contentPane.add(btnContactUs);        JButton btnDoOurSurvey = new JButton("Do our survey");        btnDoOurSurvey.addActionListener(new ActionListener() {            public void actionPerformed(ActionEvent arg0) {                btnDoOurSurveyActionPerformed();            }        });        btnDoOurSurvey.setFont(new Font("Tahoma", Font.BOLD, 17));        btnDoOurSurvey.setBounds((int)(1136 * x), (int)(622 * y),(int)( 178* w) , (int)(23 * h));        contentPane.add(btnDoOurSurvey);        tabbedPane = new JTabbedPane(JTabbedPane.TOP);        tabbedPane.setBorder(null);        tabbedPane.setForeground(UIManager.getColor("textHighlight"));        tabbedPane.setBackground(UIManager.getColor("textHighlight"));        tabbedPane.setBounds((int)(37*x),(int)( 45*y),(int)( 1277*w),(int)( 566*h));        contentPane.add(tabbedPane);        statuesLabel = new JLabel(""); //keep empty at first        statuesLabel.setForeground(Color.WHITE);        statuesLabel.setFont(new Font("Century Schoolbook", Font.BOLD, 18));        statuesLabel.setBounds((int)(50*x), (int)(680*y), (int)(1310*w), (int)(35*h));        contentPane.add(statuesLabel);        JPanel panel = new JPanel();        panel.setBorder(null);        panel.setBackground(Color.decode("#163259"));        tabbedPane.addTab("<html><H1 color=\"#163259\">Open File</H3></html>",                null, panel, null);        panel.setLayout(null);        JLabel lblNewProject = new JLabel("New Project: ");        lblNewProject.setBounds((int)(122*x),(int)( 11*y),(int)( 310*w),(int)( 54*h));        lblNewProject.setForeground(Color.WHITE);        lblNewProject.setFont(new Font("Century Schoolbook", Font.BOLD, 44));        panel.add(lblNewProject);        JLabel label = new JLabel("New Project Name: ");        label.setFont(new Font("Century Schoolbook", Font.BOLD, 22));        label.setForeground(Color.WHITE);        label.setBounds((int)(10*x), (int)(210*y), (int)(150*w),(int)(20*h));        panel.add(label);        projectNameField = new JTextField("New Project");        projectNameField.setFont(new Font("Century Schoolbook", Font.BOLD, 18));        projectNameField.setBounds((int)(170*x), (int)(210*y), (int)(150*w),(int)(20*h));        panel.add(projectNameField);        JLabel lblPreviousProject = new JLabel("Previous Project: ");        lblPreviousProject.setForeground(Color.WHITE);        lblPreviousProject                .setFont(new Font("Century Schoolbook", Font.BOLD, 44));        lblPreviousProject.setBounds((int)(771*x),(int)( 11*y),(int) (452*w), (int)(54*h));        panel.add(lblPreviousProject);        JLabel label_1 = new JLabel("|");        label_1.setForeground(Color.WHITE);        label_1.setFont(new Font("Century Schoolbook", Font.BOLD, 44));        label_1.setBounds((int)(581*x),(int)( 32*y),(int) (27*w),(int) (54*h));        panel.add(label_1);        JLabel label_2 = new JLabel("|");        label_2.setForeground(Color.WHITE);        label_2.setFont(new Font("Century Schoolbook", Font.BOLD, 44));        label_2.setBounds((int)(581*x),(int) (135*y), (int)(27*w),(int)( 54*h));        panel.add(label_2);        JLabel label_3 = new JLabel("|");        label_3.setForeground(Color.WHITE);        label_3.setFont(new Font("Century Schoolbook", Font.BOLD, 44));        label_3.setBounds((int)(581*x), (int)(83*y), (int)(27*w), (int)(54*h));        panel.add(label_3);        JLabel label_4 = new JLabel("|");        label_4.setForeground(Color.WHITE);        label_4.setFont(new Font("Century Schoolbook", Font.BOLD, 44));        label_4.setBounds((int)(581*x), (int)(186*y),(int)( 27*w),(int) (54*h));        panel.add(label_4);        JLabel label_5 = new JLabel("|");        label_5.setForeground(Color.WHITE);        label_5.setFont(new Font("Century Schoolbook", Font.BOLD, 44));        label_5.setBounds((int)(581*x), (int)(239*y), (int)(27*w), (int)(54*h));        panel.add(label_5);        JButton btnSubmit = new JButton("Submit");        btnSubmit.addActionListener(new ActionListener() {            public void actionPerformed(ActionEvent arg0) {                btnSubmitActionPerformed();            }        });        btnSubmit.setForeground(new Color(0, 0, 0));        btnSubmit.setBackground(new Color(128, 128, 128));        btnSubmit.setFont(new Font("Tahoma", Font.BOLD, 25));        btnSubmit.setBounds((int)(472*x), (int)(330*y),(int)( 276*w), (int)(108*h));        panel.add(btnSubmit);        JLabel lblPleaseSelectAn = new JLabel("Please Select an excel file: ");        lblPleaseSelectAn.setForeground(Color.WHITE);        lblPleaseSelectAn                .setFont(new Font("Century Schoolbook", Font.BOLD, 22));        lblPleaseSelectAn.setBounds((int)(10*x),(int)( 83*y),(int)( 310*w), (int)(54*h));        panel.add(lblPleaseSelectAn);        lblFileSelected = new JLabel("File selected...");        lblFileSelected.setHorizontalAlignment(SwingConstants.LEFT);        lblFileSelected.setForeground(Color.WHITE);        lblFileSelected.setFont(new Font("Century Schoolbook", Font.BOLD, 18));        lblFileSelected.setBounds((int)(182*x),(int)( 135*y), (int)(310*w),(int)( 54*h));        panel.add(lblFileSelected);        JButton btnChooseFile = new JButton("Choose file");        btnChooseFile.setFont(new Font("Tahoma", Font.BOLD, 12));        btnChooseFile.addActionListener(new ActionListener() {            public void actionPerformed(ActionEvent arg0) {                btnChooseFileActionPerformed();            }        });        btnChooseFile.setBounds((int)(39*x),(int)( 145*y),(int)( 128*w),(int) (44*h));        panel.add(btnChooseFile);        comboBox = new JComboBox();        comboBox.addItem("Create New Project");        File dir = new File(System.getProperty("user.dir"));        String[] folders = dir.list();        for(String folder : folders){            if(new File(folder + "\\settings.dat").exists()){                comboBox.addItem(folder);            }        }        comboBox.setBounds((int)(1036*x), (int)(113*y),(int)( 148*w), (int)(36*h));        panel.add(comboBox);        JLabel lblPleaseSelectA = new JLabel(                "Please Select a previous project: ");        lblPleaseSelectA.setForeground(Color.WHITE);        lblPleaseSelectA.setFont(new Font("Century Schoolbook", Font.BOLD, 22));        lblPleaseSelectA.setBounds((int)(618*x),(int)( 99*y),(int)( 408*w),(int)( 54*h));        panel.add(lblPleaseSelectA);        tabbedPane.setForegroundAt(0, Color.WHITE);        tabbedPane.setBackgroundAt(0, new Color(255, 255, 255));        final JPanel panel_1 = new JPanel();        panel_1.setBackground(Color.decode("#163259"));        tabbedPane.addTab(                "<html><H1 color=\"#EBEBEB\">Data Settings</H3></html>", null,                panel_1, null);        panel_1.setLayout(null);        JLabel lblNorthBound = new JLabel("North Bound");        lblNorthBound.setBounds((int)(76*x),(int)( 106*y),(int)( 161*w),(int)( 27*h));        lblNorthBound.setForeground(Color.WHITE);        lblNorthBound.setFont(new Font("Century Schoolbook", Font.BOLD, 22));        panel_1.add(lblNorthBound);        JLabel lblSouthBound = new JLabel("South Bound");        lblSouthBound.setForeground(Color.WHITE);        lblSouthBound.setFont(new Font("Century Schoolbook", Font.BOLD, 22));        lblSouthBound.setBounds((int)(299*x),(int)( 106*y), (int)(161*w),(int)( 27*h));        panel_1.add(lblSouthBound);        JLabel lblEastBound = new JLabel("East Bound");        lblEastBound.setForeground(Color.WHITE);        lblEastBound.setFont(new Font("Century Schoolbook", Font.BOLD, 22));        lblEastBound.setBounds((int)(542*x),(int)( 106*y),(int)( 161*w), (int)(27*h));        panel_1.add(lblEastBound);        JLabel lblWestBound = new JLabel("West Bound");        lblWestBound.setForeground(Color.WHITE);        lblWestBound.setFont(new Font("Century Schoolbook", Font.BOLD, 22));        lblWestBound.setBounds((int)(763*x), (int)(106*y), (int)(161*w), (int)(27*h));        panel_1.add(lblWestBound);        JLabel lblTimeInterval = new JLabel("Time Interval: ");        lblTimeInterval.setForeground(Color.WHITE);        lblTimeInterval.setFont(new Font("Century Schoolbook", Font.BOLD, 22));        lblTimeInterval.setBounds((int)(69*x),(int)( 27*y), (int)(181*w), (int)(27*h));        panel_1.add(lblTimeInterval);        JLabel lblStartEnd = new JLabel("Start / End day");        lblStartEnd.setForeground(Color.WHITE);        lblStartEnd.setFont(new Font("Century Schoolbook", Font.BOLD, 18));        lblStartEnd.setBounds((int)(388*x), 0, (int)(181*w), (int)(27*h));        panel_1.add(lblStartEnd);        JLabel lblStartEnd_1 = new JLabel("Start / End time");        lblStartEnd_1.setForeground(Color.WHITE);        lblStartEnd_1.setFont(new Font("Century Schoolbook", Font.BOLD, 18));        lblStartEnd_1.setBounds((int)(754*x), 0, (int)(181*w), (int)(27*h));        panel_1.add(lblStartEnd_1);        startDateCombo = new JComboBox();        startDateCombo.setBounds((int)(316*x),(int) (27*y),(int)( 125*w), (int)(33*h));        panel_1.add(startDateCombo);        endDateCombo = new JComboBox();        endDateCombo.setBounds((int)(452*x), (int)(27*y), (int)(125*w), (int)(33*h));        panel_1.add(endDateCombo);        startTimeCombo = new JComboBox();        startTimeCombo.setBounds((int)(712*x), (int)(27*y), (int)(125*w), (int)(33*h));        panel_1.add(startTimeCombo);        endTimeCombo = new JComboBox();        endTimeCombo.setBounds((int)(847*x), (int)(27*y), (int)(125*w),(int)( 33*h));        panel_1.add(endTimeCombo);        checkBoxNBound = new JCheckBox("");        checkBoxNBound.setBounds((int)(122*x),(int)( 140*y),(int)( 21*w), (int)(27*h));        checkBoxNBound.setBackground(Color.decode("#163259"));        panel_1.add(checkBoxNBound);        checkBoxSBound = new JCheckBox("");        checkBoxSBound.setBounds((int)(363*x), (int)(140*y), (int)(21*w),(int)( 27*h));        checkBoxSBound.setBackground(Color.decode("#163259"));        panel_1.add(checkBoxSBound);        checkBoxEBound = new JCheckBox("");        checkBoxEBound.setBounds((int)(588*x), (int)(140*y), (int)(21*w), (int)(27*h));        checkBoxEBound.setBackground(Color.decode("#163259"));        panel_1.add(checkBoxEBound);        listNBound = new JList();        northListModel = new DefaultListModel();        listNBound.setModel(northListModel);        JScrollPane listNBoundScroll = new JScrollPane(listNBound);        listNBoundScroll.setBounds((int)(69*x), (int)(218*y), (int)(166*w), (int)(128*h));        panel_1.add(listNBoundScroll);        cBoxNBound = new JComboBox();        cBoxNBound.setBounds((int)(69*x), (int)(174*y), (int)(168*w), (int)(33*h));        panel_1.add(cBoxNBound);        JButton btnAddRouteNBound = new JButton("Add Route");        btnAddRouteNBound.setFont(new Font("Tahoma", Font.BOLD, 14));        btnAddRouteNBound.setBounds((int)(69*x), (int)(357*y), (int)(168*w), (int)(39*h));        btnAddRouteNBound.addActionListener(new ActionListener() {            @Override            public void actionPerformed(ActionEvent e) {                btnAddRouteActionPerformed();            }        });        panel_1.add(btnAddRouteNBound);        JButton btnRemoveRouteNBound = new JButton("Remove Route");        btnRemoveRouteNBound.setFont(new Font("Tahoma", Font.BOLD, 14));        btnRemoveRouteNBound.setBounds((int)(69*x), (int)(407*y), (int)(168*w), (int)(39*h));        btnRemoveRouteNBound.addActionListener(new ActionListener() {            @Override            public void actionPerformed(ActionEvent e) {                btnRemoveRouteActionPerformed();            }        });        panel_1.add(btnRemoveRouteNBound);        cBoxSBound = new JComboBox();        cBoxSBound.setBounds((int)(292*x), (int)(174*y), (int)(168*w), (int)(33*h));        panel_1.add(cBoxSBound);        listSBound = new JList();        southListModel = new DefaultListModel();        listSBound.setModel(southListModel);        JScrollPane listSBoundScroll = new JScrollPane(listSBound);        listSBoundScroll.setBounds((int)(292*x), (int)(218*y), (int)(166*w), (int)(128*h));        panel_1.add(listSBoundScroll);        JButton btnAddRouteSBound = new JButton("Add Route");        btnAddRouteSBound.setFont(new Font("Tahoma", Font.BOLD, 14));        btnAddRouteSBound.setBounds((int)(292*x), (int)(357*y), (int)(168*w), (int)(39*h));        btnAddRouteSBound.addActionListener(new ActionListener() {            @Override            public void actionPerformed(ActionEvent e) {                btnAddRouteSBoundActionPerformed();            }        });        panel_1.add(btnAddRouteSBound);        JButton btnRemoveRouteSBound = new JButton("Remove Route");        btnRemoveRouteSBound.setFont(new Font("Tahoma", Font.BOLD, 14));        btnRemoveRouteSBound.setBounds((int)(292*x), (int)(407*y), (int)(168*w), (int)(39*h));        btnRemoveRouteSBound.addActionListener(new ActionListener() {            @Override            public void actionPerformed(ActionEvent e) {                btnRemoveRouteSBoundActionPerformed();            }        });        panel_1.add(btnRemoveRouteSBound);        cBoxEBound = new JComboBox();        cBoxEBound.setBounds((int)(517*x), (int)(174*y), (int)(168*w), (int)(33*h));        panel_1.add(cBoxEBound);        listEBound = new JList();        eastListModel = new DefaultListModel();        listEBound.setModel(eastListModel);        JScrollPane listEBoundScroll = new JScrollPane(listEBound);        listEBoundScroll.setBounds((int)(517*x), (int)(218*y), (int)(166*w), (int)(128*h));        panel_1.add(listEBoundScroll);        JButton btnAddRouteEBound = new JButton("Add Route");        btnAddRouteEBound.setFont(new Font("Tahoma", Font.BOLD, 14));        btnAddRouteEBound.setBounds((int)(517*x), (int)(357*y), (int)(168*w), (int)(39*h));        btnAddRouteEBound.addActionListener(new ActionListener() {            @Override            public void actionPerformed(ActionEvent e) {                btnAddRouteEBoundActionPerformed();            }        });        panel_1.add(btnAddRouteEBound);        JButton btnRemoveRouteEBound = new JButton("Remove Route");        btnRemoveRouteEBound.setFont(new Font("Tahoma", Font.BOLD, 14));        btnRemoveRouteEBound.setBounds((int)(517*x), (int)(407*y), (int)(168*w), (int)(39*h));        btnRemoveRouteEBound.addActionListener(new ActionListener() {            @Override            public void actionPerformed(ActionEvent e) {                btnRemoveRouteEBoundActionPerformed();            }        });        panel_1.add(btnRemoveRouteEBound);        cBoxWBound = new JComboBox();        cBoxWBound.setBounds((int)(756*x), (int)(174*y), (int)(168*w), (int)(33*h));        panel_1.add(cBoxWBound);        listWBound = new JList();        westListModel = new DefaultListModel();        listWBound.setModel(westListModel);        JScrollPane listWBoundScroll = new JScrollPane(listWBound);        listWBoundScroll.setBounds((int)(756*x), (int)(218*y), (int)(166*w), (int)(128*h));        panel_1.add(listWBoundScroll);        JButton btnAddRouteWBound = new JButton("Add Route");        btnAddRouteWBound.setFont(new Font("Tahoma", Font.BOLD, 14));        btnAddRouteWBound.setBounds((int)(756*x), (int)(357*y), (int)(168*w), (int)(39*h));        btnAddRouteWBound.addActionListener(new ActionListener() {            @Override            public void actionPerformed(ActionEvent e) {                btnAddRouteWBoundActionPerformed();            }        });        panel_1.add(btnAddRouteWBound);        JButton btnRemoveRouteWBound = new JButton("Remove Route");        btnRemoveRouteWBound.setFont(new Font("Tahoma", Font.BOLD, 14));        btnRemoveRouteWBound.setBounds((int)(756*x), (int)(407*y), (int)(168*w), (int)(39*h));        btnRemoveRouteWBound.addActionListener(new ActionListener() {            @Override            public void actionPerformed(ActionEvent e) {                btnRemoveRouteWBoundActionPerformed();            }        });        panel_1.add(btnRemoveRouteWBound);        checkBoxWBound = new JCheckBox("");        checkBoxWBound.setBounds((int)(814*x), (int)(140*y), (int)(21*w), (int)(27*h));        checkBoxWBound.setBackground(Color.decode("#163259"));        panel_1.add(checkBoxWBound);        JButton btnSubmitDataSettings = new JButton("Submit");        btnSubmitDataSettings.addActionListener(new ActionListener() {            public void actionPerformed(ActionEvent arg0) {                try{                btnSubmitButtonDataSettingsActionPerformed();                }catch(IOException e){                    e.printStackTrace();                }            }        });        btnSubmitDataSettings.setFont(new Font("Tahoma", Font.BOLD, 14));        btnSubmitDataSettings.setBounds((int)(509*x), (int)(457*y), (int)(249*w), (int)(35*h));        panel_1.add(btnSubmitDataSettings);        JLabel lblEvents = new JLabel("Events");        lblEvents.setForeground(Color.WHITE);        lblEvents.setFont(new Font("Century Schoolbook", Font.BOLD, 22));        lblEvents.setBounds((int)(1062*x), (int)(106*y), (int)(161*w), (int)(27*h));        panel_1.add(lblEvents);        list_4 = new JList();        JScrollPane list_4Scroll = new JScrollPane(list_4);        list_4Scroll.setBounds((int)(1062*x), (int)(218*y), (int)(166*w), (int)(128*h));        eventListModel = new DefaultListModel();        list_4.setModel(eventListModel);        panel_1.add(list_4Scroll);        JButton btnEditEvent = new JButton("Edit Event");        btnEditEvent.setFont(new Font("Tahoma", Font.BOLD, 14));        btnEditEvent.setBounds((int) (1062 * x), (int) (357 * y), (int) (168 * w), (int) (39 * h));        btnEditEvent.addActionListener(new ActionListener() {            @Override            public void actionPerformed(ActionEvent e) {                btnEditEventActionPreformed();            }        });        panel_1.add(btnEditEvent);        JButton btnRemoveEvent = new JButton("Remove Event");        btnRemoveEvent.setFont(new Font("Tahoma", Font.BOLD, 14));        btnRemoveEvent.setBounds((int) (1062 * x), (int) (407 * y), (int) (168 * w), (int) (39 * h));        btnRemoveEvent.addActionListener(new ActionListener() {            @Override            public void actionPerformed(ActionEvent e) {                btnRemoveEventActionPerformed();            }        });        panel_1.add(btnRemoveEvent);        Button button_8 = new Button("New Event");        button_8.addActionListener(new ActionListener() {            public void actionPerformed(ActionEvent e) {                newEventFrame();            }        });        button_8.setFont(new Font("Dialog", Font.BOLD, 14));        button_8.setBounds((int)(1062*x), (int)(174*y), (int)(168*w), (int)(33*h));        panel_1.add(button_8);        tabbedPane.setEnabledAt(1, false);        tabbedPane.setForegroundAt(1, new Color(30, 144, 255));        panel_2 = new JPanel();        panel_2.setBackground(Color.decode("#163259"));        tabbedPane.addTab("<html><H1 color=\"#EBEBEB\">Graphs</H3></html>",                null, panel_2, null);        /*        try {            panel_2.setLayout(null);            graphs = new Graphs();            graphs.setBounds((int)(10*x), (int)(11*y), (int)(1252*w), (int)(449*h));            panel_2.add(graphs);        } catch (IOException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }      */        panel_2.setSize((int)(700 * x),(int) (500 * y));        tabbedPane.setEnabledAt(2, false);        tabbedPane.setForegroundAt(2, new Color(30, 144, 255));        final JPanel panel_3 = new JPanel();        panel_3.setBackground(Color.decode("#163259"));        panel_3.setLayout(null);        JButton exportButton = new JButton("Export Data");        exportButton.setFont(new Font("Tahoma", Font.BOLD, 14));        exportButton.setBounds((int) (509 * x), (int) (457 * y), (int) (249 * w), (int) (35 * h));        exportButton.addActionListener(new ActionListener() {            @Override            public void actionPerformed(ActionEvent e) {                exportButtonActionPerformed();            }        });        panel_3.add(exportButton);        JLabel writerFileLabel = new JLabel("File Name:");        writerFileLabel.setBounds((int)(550*x),(int)(50*y),(int)(249*w),(int)(25 *h));        writerFileLabel.setFont(new Font("Century Schoolbook", Font.BOLD, 18));        writerFileLabel.setForeground(Color.WHITE);        panel_3.add(writerFileLabel);        writerFileText = new JTextField("TestMaster");        writerFileText.setFont(new Font("Tahoma", Font.BOLD, 14));        writerFileText.setBounds((int)(634*x),(int)(50*y),(int)(249*w),(int)(25 *h));        panel_3.add(writerFileText);        //add export panel to tabbed panel        tabbedPane.addTab("<html><H1 color=\"#EBEBEB\">Export</H3></html>",                null, panel_3, null);        tabbedPane.setEnabledAt(3, false);        tabbedPane.setForegroundAt(3, new Color(30, 144, 255));        JLabel lblDynamicStat = new JLabel("Dynamic Stat");        lblDynamicStat.setForeground(new Color(255, 255, 255));        lblDynamicStat.setFont(new Font("Century Schoolbook", Font.BOLD, 44));        lblDynamicStat.setBounds((int)(560*x), 0, (int)(371*w), (int)(54*h));        contentPane.add(lblDynamicStat);        statuesLabel.setText("Build Successful Ver. 1.001 (Alpha)");        double endTimer = System.nanoTime();        System.out.println("Build Successful: " + (endTimer - startTimer)/1000000000 + "s");    }    public File getFile() {        // filter was taken from        // http://stackoverflow.com/questions/18571203/how-to-browse-the-files-only-with-extensions-xls-using-jfilechooser-in-swing        JFileChooser fileChooser = new JFileChooser();        FileNameExtensionFilter filter = new FileNameExtensionFilter(                "XLS files", "xls");        fileChooser.setFileFilter(filter);        // fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);        int result = fileChooser.showOpenDialog(this);        // if user clicked Cancel button on dialog, return        File fileName = fileChooser.getSelectedFile();// get file        return fileName;    }// end getFile    /*************************************************     *       all actionlisteners for open file tab     *************************************************/    public void btnSubmitActionPerformed(){        projectName =  projectNameField.getText();        File newProject = new File(projectName);        try{            if(comboBox.getSelectedIndex() == 0){ //if create new project is selected                //error Check                if(newProject.exists() && (new File(projectName + "/settings.dat").exists())){                    statuesLabel.setForeground(Color.RED);                    statuesLabel.setText("Input Error: Project Already Exist");                }else if (selectedFile == null) {                    statuesLabel.setForeground(Color.RED);                    statuesLabel.setText("Input Error: Please Select File");                }else{ //everything is fine                    newProject.mkdir(); //make into a new folder                    //set input file for reading                    excel.setInputFile(lblFileSelected.getText());                    try{                        excel.Read();                    }catch(IOException e){                        e.printStackTrace();                    }                    Set a = excel.data.keySet();                    Object[] dateKeys = a.toArray();                    Set b = excel.data.get(dateKeys[0]).keySet();                    Object[] routeKeys = b.toArray();                    //for each date                    for(int i = 0; i < dateKeys.length;i++){                        //fill combo boxes from available dates                        startDateCombo.addItem(dateKeys[i]);                        endDateCombo.addItem((dateKeys[i]));                    } //end for each date                    //for each route                    for(int i = 0; i < routeKeys.length;i++){                        //fill comboboxes with all routes                        cBoxNBound.addItem(routeKeys[i]);                        cBoxSBound.addItem(routeKeys[i]);                        cBoxEBound.addItem(routeKeys[i]);                        cBoxWBound.addItem(routeKeys[i]);                    } //end for each route                    //populate timeInterval                    for(int i = 1; i <= 23;i++){                        startTimeCombo.addItem(i + ":00");                        endTimeCombo.addItem(i + ":00");                    }                    // if a file is selected then do the next thing                    tabbedPane.setEnabledAt(1, true);                    tabbedPane                            .setTitleAt(1,                                    "<html><H1 color=\"#163259\">Data Settings</H3></html>");                    tabbedPane.setSelectedIndex(1);                    statuesLabel.setForeground(Color.WHITE);                    statuesLabel.setText("Data Has Been Read Successfully");                }            }else{ //if the user wants to load an existing project.                //read data and fill data settings                excel.setInputFile(comboBox.getSelectedItem() + "/corridor_report.xls");                excel.Read();                Set a = excel.data.keySet();                Object[] dateKeys = a.toArray();                Set b = excel.data.get(dateKeys[0]).keySet();                Object[] routeKeys = b.toArray();                //for each date                for(int i = 0; i < dateKeys.length;i++){                    //fill combo boxes from available dates                    startDateCombo.addItem(dateKeys[i]);                    endDateCombo.addItem((dateKeys[i]));                } //end for each date                //for each route                for(int i = 0; i < routeKeys.length;i++){                    //fill comboboxes with all routes                    cBoxNBound.addItem(routeKeys[i]);                    cBoxSBound.addItem(routeKeys[i]);                    cBoxEBound.addItem(routeKeys[i]);                    cBoxWBound.addItem(routeKeys[i]);                } //end for each route                //populate timeInterval                for(int i = 1; i <= 23;i++){                    startTimeCombo.addItem(i + ":00");                    endTimeCombo.addItem(i + ":00");                }                //set previous data settings                Scanner scan = new Scanner(new File(comboBox.getSelectedItem() + "/settings.dat"));                scan.useDelimiter("\r\n");                String startDate = scan.next();                String endDate = scan.next();                int startTime = Integer.parseInt(scan.next());                int endTime = Integer.parseInt(scan.next());                boolean north = scan.nextBoolean();                boolean south = scan.nextBoolean();                boolean east = scan.nextBoolean();                boolean west = scan.nextBoolean();                ArrayList<String> northRoutes = new ArrayList<String>();                ArrayList<String> southRoutes = new ArrayList<String>();                ArrayList<String> eastRoutes = new ArrayList<String>();                ArrayList<String> westRoutes = new ArrayList<String>();                ArrayList<ArrayList<String>> dataEvents = new ArrayList<ArrayList<String>>();                for(int i=0; i<4; i++){                    Scanner arrayScan = new Scanner(scan.next());                    arrayScan.useDelimiter(";");                    while(arrayScan.hasNext()){                        if(i==0){                            northRoutes.add(arrayScan.next());                        }                        if(i==1){                            southRoutes.add(arrayScan.next());                        }                        if(i==2){                            eastRoutes.add(arrayScan.next());                        }                        if(i==3){                            westRoutes.add(arrayScan.next());                        }                    }                }                while(scan.hasNext()){                    Scanner eventScan = new Scanner(scan.next());                    eventScan.useDelimiter(";");                    ArrayList<String> temp = new ArrayList<String>();                    while(eventScan.hasNext()){                        temp.add(eventScan.next());                    }                    dataEvents.add(temp);                }                //set components to previous settings                startDateCombo.setSelectedItem(startDate);                endDateCombo.setSelectedItem(endDate);                startTimeCombo.setSelectedIndex(startTime - 1);                endTimeCombo.setSelectedIndex(endTime - 1);                checkBoxNBound.setSelected(north);                checkBoxSBound.setSelected(south);                checkBoxEBound.setSelected(east);                checkBoxWBound.setSelected(west);                //for each route                for(int i =0; i < northRoutes.size(); i++){                    northListModel.addElement(northRoutes.get(i));                } for(int i =0; i < southRoutes.size(); i++){                    southListModel.addElement(northRoutes.get(i));                }for(int i =0; i < eastRoutes.size(); i++){                    eastListModel.addElement(northRoutes.get(i));                }for(int i =0; i < westRoutes.size(); i++){                    westListModel.addElement(northRoutes.get(i));                }                //for each event                for(int i = 0; i< dataEvents.size();i++){                    Event existingEvent = new Event();                    existingEvent.setEventName(dataEvents.get(i).get(0));                    existingEvent.setEventTime(Integer.parseInt(dataEvents.get(i).get(1)));                    ArrayList<String> dates = new ArrayList<String>();                    //for each event date                    for(int j = 2; j < dataEvents.get(i).size();j++){                        dates.add(dataEvents.get(i).get(j));                    }                    existingEvent.setEventDates(dates);                    events.add(existingEvent);                    eventListModel.addElement(existingEvent.getEventName());                }                excel.Analyze(comboBox.getSelectedItem() + "\\settings.dat");                tabbedPane.setEnabledAt(1, true);                tabbedPane                        .setTitleAt(1,                                "<html><H1 color=\"#163259\">Data Settings</H3></html>");                //enable tabs                tabbedPane.setEnabledAt(2, true);                tabbedPane.setEnabledAt(3, true);                tabbedPane.setTitleAt(2,                        "<html><H1 color=\"#163259\">Graphs</H3></html>");                tabbedPane.setTitleAt(3,                        "<html><H1 color=\"#163259\">Export</H3></html>");                tabbedPane.setSelectedIndex(1);                statuesLabel.setForeground(Color.WHITE);                statuesLabel.setText("Load Project Successful");            }        }catch(Exception e){            e.printStackTrace();            statuesLabel.setForeground(Color.RED);            statuesLabel.setText("Unknown Error");        }    }    public void btnContactUsActionPerformed(){        // To contact us a new JFrame will appear and display an email        // to which the user can send messages        JFrame alert = new JFrame();        alert.setTitle("How to Contact us");        alert.setResizable(false);        alert.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        alert.setBounds((int)(100 * x),(int)( 100 * y),(int) (450 * w),(int)( 300 * h));        contentPane = new JPanel();        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));        contentPane.setBackground(Color.decode("#014D33"));        alert.setContentPane(contentPane);        contentPane.setLayout(null);        JPanel panel = new JPanel();        panel.setBounds((int)(21 * x),(int)( 23 * y), (int)(402 * w),(int)( 224 * h));        panel.setBackground(Color.decode("#163259"));        contentPane.add(panel);        panel.setLayout(null);        JLabel lblNewLabel = new JLabel(                "Please Email jamesmpalmisano@gmail.com");        lblNewLabel.setForeground(new Color(255, 255, 255));        lblNewLabel.setFont(new Font("Times New Roman", Font.BOLD, 15));        lblNewLabel.setBounds((int)(59 * x),(int)( 59 * y), (int)(302 * w),(int)( 89 * h));        panel.add(lblNewLabel);        alert.setVisible(true);        alert.setDefaultCloseOperation(HIDE_ON_CLOSE);    }   //end contact us    public void btnDoOurSurveyActionPerformed(){        // open default webbrowsser        // this code was found here        // http://stackoverflow.com/questions/10967451/open-a-link-in-browser-with-java-button        Desktop desktop = Desktop.isDesktopSupported() ? Desktop                .getDesktop() : null;        if (desktop != null                && desktop.isSupported(Desktop.Action.BROWSE)) {            try {                desktop.browse(new URI("http://goo.gl/forms/m8OqtUwd8l"));            } catch (Exception e) {                e.printStackTrace();            }        }    }//end do our survey    public void btnChooseFileActionPerformed(){        selectedFile = getFile();        if (selectedFile != null)            lblFileSelected.setText(selectedFile.toString());    }    /***********************************************************************************     *                    all actionListeners for data settings tab     ***********************************************************************************/    public void btnSubmitButtonDataSettingsActionPerformed() throws IOException{        try{        //check for bad input        if(endTimeCombo.getSelectedIndex() <= startTimeCombo.getSelectedIndex()){  //if bad time interval. reversed or no time interval            //display error message            statuesLabel.setForeground(Color.RED);            statuesLabel.setText("Data Settings Error: Bad Time Interval");        }else if(endDateCombo.getSelectedIndex() <= startDateCombo.getSelectedIndex()){ //if bad date interval            //display error message            statuesLabel.setForeground(Color.RED);            statuesLabel.setText("Data Settings Error: Bad Date Interval");        }else if(!(checkBoxNBound.isSelected() || checkBoxSBound.isSelected() || checkBoxEBound.isSelected()||                checkBoxWBound.isSelected())){ //no direction is selected            //display error message            statuesLabel.setForeground(Color.RED);            statuesLabel.setText("Data Settings Error: No Direction Of Traffic Selected");        }else if((checkBoxNBound.isSelected()&&northListModel.getSize() == 0) ||                (checkBoxSBound.isSelected()&&southListModel.getSize() == 0)                || (checkBoxEBound.isSelected()&&eastListModel.getSize() == 0) ||                (checkBoxWBound.isSelected()&&westListModel.getSize() == 0)){ //no routes added. to selected traffic direction            //display error message            statuesLabel.setForeground(Color.RED);            statuesLabel.setText("Data Settings Error: No Routes Selected");        }else if(eventListModel.getSize() == 0){ //must have at least 1 event            //display error message            statuesLabel.setForeground(Color.RED);            statuesLabel.setText("Data Settings Error: Must Have At Least One Event");        }else { //else everything is ok                //create settings.dat                PrintWriter writer = new PrintWriter(new File(projectName+"\\settings.dat"));                //write data settings to settings .dat                writer.println(startDateCombo.getSelectedItem());                writer.println(endDateCombo.getSelectedItem());                writer.println((startTimeCombo.getSelectedIndex()+1));                writer.println((endTimeCombo.getSelectedIndex() + 1));                writer.println(checkBoxNBound.isSelected());                writer.println(checkBoxSBound.isSelected());                writer.println(checkBoxEBound.isSelected());                writer.println(checkBoxWBound.isSelected());                //for each route                for(int i = 0; i < northListModel.getSize();i++){                    if(i == 0){                        writer.print(northListModel.getElementAt(i));                    }else{                        writer.print(";"+northListModel.getElementAt(i));                    }                }                writer.println();                //for each route                for(int i = 0; i < southListModel.getSize();i++){                    if(i == 0){                        writer.print(southListModel.getElementAt(i));                    }else{                        writer.print(";"+southListModel.getElementAt(i));                    }                }                writer.println();                //for each route                for(int i = 0; i < eastListModel.getSize();i++){                    if(i ==0){                        writer.print(eastListModel.getElementAt(i));                    }else{                        writer.print(";"+eastListModel.getElementAt(i));                    }                }                writer.println();                //for each route                for(int i = 0; i < westListModel.getSize();i++){                    if(i == 0){                        writer.print(westListModel.getElementAt(i));                    }else{                        writer.print(";"+westListModel.getElementAt(i));                    }                }                //for each event                for(int i =0; i < events.size();i++){                    writer.println();                    writer.print(events.get(i).getEventName());                    writer.print(";" + events.get(i).getEventTime());                    ArrayList<String> eventDate = events.get(i).getEventDates();                    //for each date                    for(int j = 0; j < eventDate.size();j++){                        writer.print(";" + eventDate.get(j));                    } //end for each date                }//end for each event                writer.close();                //anaylize data                excel.Analyze(projectName+"\\settings.dat");                try {                    panel_2.setLayout(null);                    graphs = new Graphs("graph", excel);                    graphs.setBounds((int)(10*x), (int)(11*y), (int)(1252*w), (int)(490*h));                    panel_2.add(graphs);                } catch (IOException e) {                    // TODO Auto-generated catch block                    e.printStackTrace();                }                //graphs = new Graphs("graph", excel);                //enable tabs                tabbedPane.setEnabledAt(2, true);                tabbedPane.setEnabledAt(3, true);                tabbedPane.setTitleAt(2,                        "<html><H1 color=\"#163259\">Graphs</H3></html>");                tabbedPane.setTitleAt(3,                        "<html><H1 color=\"#163259\">Export</H3></html>");                tabbedPane.setSelectedIndex(2);                //close writer and free allocated space                //move for future use                File corridorReport = new File(lblFileSelected.getText());                corridorReport.renameTo(new File(projectName + "\\corridor_report.xls"));                statuesLabel.setForeground(Color.WHITE);                statuesLabel.setText("Data Analysis Successful");        }        }catch(Exception e){            e.printStackTrace();            statuesLabel.setForeground(Color.RED);            statuesLabel.setText("Unknown Error");        }    }// end submit button    public void btnAddRouteActionPerformed(){        //add selected route to JList        northListModel.addElement(cBoxNBound.getSelectedItem());    }//end add button    public void btnRemoveRouteActionPerformed(){        //remove selected route from JList        northListModel.removeElement((String)listNBound.getSelectedValue());    }//end remove button    public void btnAddRouteSBoundActionPerformed(){        //add selected route to Jlist        southListModel.addElement(cBoxSBound.getSelectedItem());    }//end add button    public void btnRemoveRouteSBoundActionPerformed(){        //remove selected route from Jlist        southListModel.removeElement((String)listSBound.getSelectedValue());    }//end remove button    public void btnAddRouteEBoundActionPerformed(){        //add selected route to Jlist        eastListModel.addElement(cBoxEBound.getSelectedItem());    }//end add button    public void btnRemoveRouteEBoundActionPerformed(){        //remove selected route from Jlist        eastListModel.removeElement((String)listEBound.getSelectedValue());    } // end remove button    public void btnAddRouteWBoundActionPerformed(){        //add selected route to Jlist        westListModel.addElement(cBoxWBound.getSelectedItem());    }  //end add button    public void btnRemoveRouteWBoundActionPerformed(){        //remove selected route from Jlist        westListModel.removeElement((String)listWBound.getSelectedValue());    } //end remove button    public void btnRemoveEventActionPerformed(){        if(eventListModel.getSize() > 0){            eventListModel.removeElementAt(list_4.getSelectedIndex());            for(int i = 0; i < eventListModel.getSize();i++){                if(list_4.getSelectedValue() == events.get(i).getEventName())                    events.remove(i);            }        }    }    public void btnEditEventActionPreformed(){        if(eventListModel.getSize() > 0){            eventListModel.removeElementAt(list_4.getSelectedIndex());            //remove and then add new event            for(int i = 0; i < eventListModel.getSize();i++){                if(list_4.getSelectedValue() == events.get(i).getEventName())                    events.remove(i);            }            newEventFrame();        }    } //end edit even    /***********************************************     *       ActionPerformed for new event frame     ***********************************************/    public void newEventSubmitActionPerformed(){        //build event class and add to array of events        Event newEvent = new Event();        newEvent.setEventName(txtNewEventName.getText());        newEvent.setEventTime(timesCombo.getSelectedIndex() + 1);        ArrayList<String> eventDates = newEvent.getEventDates();        for(int i = 0; i < selectedModel.getSize();i++){            eventDates.add((String)selectedModel.getElementAt(i));        }        events.add(newEvent);        eventListModel.addElement(newEvent.getEventName());    }//end submit    public void addDateActionPerfomed(){        selectedModel.addElement(listOFAvailDates.getSelectedValue());        availableModel.remove(listOFAvailDates.getSelectedIndex());    } //end add    public void removeDateActionPerformed(){        availableModel.addElement(listOfSelectedDates.getSelectedValue());        selectedModel.remove(listOfSelectedDates.getSelectedIndex());    } //end remove    /*************************************************     *        Action Listeners for export tab     *************************************************/    public void exportButtonActionPerformed(){        try{            excel.Write(projectName+"\\" + writerFileText.getText());            statuesLabel.setForeground(Color.WHITE);            statuesLabel.setText("Data Written to Excel Successful");        }catch(IOException e){            e.printStackTrace();        }catch(WriteException e){            e.printStackTrace();        }catch(Exception e){            e.printStackTrace();            statuesLabel.setForeground(Color.RED);            statuesLabel.setText("Unknown Error");        }    } //end export button    public void newEventFrame(){        final JFrame newEvent = new JFrame();        newEvent.setVisible(true);        newEvent.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);        newEvent.setBounds(100, 100, 526, 379);        contentPane = new JPanel();        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));        contentPane.setBackground(Color.decode("#014D33"));        newEvent.setContentPane(contentPane);        contentPane.setLayout(null);        JLabel lblEventStartTme = new JLabel("Event Start Tme: ");        lblEventStartTme.setForeground(new Color(255, 255, 255));        lblEventStartTme.setFont(new Font("Tahoma", Font.BOLD, 14));        lblEventStartTme.setBounds(10, 11, 134, 42);        contentPane.add(lblEventStartTme);        timesCombo = new JComboBox();        timesCombo.setBounds(154, 18, 95, 32);        for(int i = 1; i <= 23;i++){            timesCombo.addItem(i + ":00");        }        contentPane.add(timesCombo);        txtNewEventName = new JTextField();        txtNewEventName.setText("New Event Name");        txtNewEventName.setBounds(293, 18, 177, 20);        contentPane.add(txtNewEventName);        txtNewEventName.setColumns(10);        JLabel lblAvailableDates = new JLabel("Available dates");        lblAvailableDates.setForeground(new Color(255, 255, 255));        lblAvailableDates.setFont(new Font("Tahoma", Font.BOLD, 14));        lblAvailableDates.setBounds(87, 78, 130, 14);        contentPane.add(lblAvailableDates);        JLabel lblSelectedDate = new JLabel("Selected Date");        lblSelectedDate.setFont(new Font("Tahoma", Font.BOLD, 14));        lblSelectedDate.setForeground(new Color(255, 255, 255));        lblSelectedDate.setBounds(318, 78, 117, 14);        contentPane.add(lblSelectedDate);        listOFAvailDates = new JList();        JScrollPane listDatesScroll = new JScrollPane(listOFAvailDates);        listDatesScroll.setBounds(10, 115, 207, 169);        availableModel = new DefaultListModel();        listOFAvailDates.setModel(availableModel);        Set a = excel.data.keySet();        Object[] dateKeys = a.toArray();        //for each date        for(int i = startDateCombo.getSelectedIndex(); i <= endDateCombo.getSelectedIndex();i++){            availableModel.addElement(dateKeys[i]);        } //end for each date        contentPane.add(listDatesScroll);        JButton btnNewButton = new JButton(">>");        btnNewButton.setBounds(223, 126, 67, 23);        btnNewButton.addActionListener(new ActionListener() {            @Override            public void actionPerformed(ActionEvent e) {                addDateActionPerfomed();            }        });        contentPane.add(btnNewButton);        JButton button = new JButton("<<");        button.setBounds(223, 235, 67, 23);        button.addActionListener(new ActionListener() {            @Override            public void actionPerformed(ActionEvent e) {                removeDateActionPerformed();            }        });        contentPane.add(button);        listOfSelectedDates = new JList();        JScrollPane listSelectScroll = new JScrollPane(listOfSelectedDates);        listSelectScroll.setBounds(293, 115, 207, 169);        selectedModel = new DefaultListModel();        listOfSelectedDates.setModel(selectedModel);        contentPane.add(listSelectScroll);        JButton btnSubmit = new JButton("Submit");        btnSubmit.setFont(new Font("Tahoma", Font.BOLD, 14));        btnSubmit.addActionListener(new ActionListener() {            public void actionPerformed(ActionEvent e) {                //capture info when this btn is clicked                newEventSubmitActionPerformed();                newEvent.dispose(); //close after finished            }        });        btnSubmit.setBounds(128, 306, 89, 23);        contentPane.add(btnSubmit);        JButton btnCancel = new JButton("Cancel");        btnCancel.setFont(new Font("Tahoma", Font.BOLD, 14));        btnCancel.addActionListener(new ActionListener() {            public void actionPerformed(ActionEvent arg0) {                newEvent.dispose();            }        });        btnCancel.setBounds(293, 306, 89, 23);        contentPane.add(btnCancel);    }} //end newGUI